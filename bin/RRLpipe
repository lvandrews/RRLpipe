#!/usr/bin/env bash
#
#  RRLpipe - RRLpipe master script
#
#  Version 0.1 (March, 20, 2020)
#
#  Copyright (c) 2020 -- Lela Andrews
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event will the authors be held liable for any damages
#  arising from the use of this software.
#
#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#  3. This notice may not be removed or altered from any source distribution.
#
## Trap function on exit.
function finish {
if [[ -f $stdout ]]; then
        rm $stdout
fi
if [[ -f $stderr ]]; then
        rm $stderr
fi
}
trap finish EXIT

## Set version and copyright
        version="0.1"
        copyright="Lela Andrews, 2020"

## Call paths
        bindir="$( cd "$( dirname "$0" )" && pwd )"
        libdir=$(grep "Libraries" $bindir/.RRLpipe.config | cut -f2)
        srcdir=$(grep "Resources" $bindir/.RRLpipe.config | cut -f2)
        docdir=$(grep "Documentation" $bindir/.RRLpipe.config | cut -f2)
        tmpdir=$(grep "Temporary" $bindir/.RRLpipe.config | cut -f2)
        cmpdir=$(grep "Completion" $bindir/.RRLpipe.config | cut -f2)

## Set working directory and other important variables
        workdir=$(pwd)
        randcode=`cat /dev/urandom |tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1` 2>/dev/null
        stderr=($tmptmp/$randcode\_stderr)
        stdout=($tmpdir/$randcode\_stdout)

## Usage and help
        usage="$docdir/RRLpipe.usage"
        help="$docdir/RRLpipe.help"

## Check whether user supplied help, -h or --help. If yes display help.
        if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "help" ]]; then
        less $help
                exit 0  
        fi

## Display version and copyright
        echo "RRLpipe version $version, $copyright
"

## Find config file with config_id script, run config if result is null

        bash $libdir/config_id $workdir $srcdir $tmpdir $randcode
        wait
        globallocal=$(head -1 $tmpdir/${randcode}_configid)
        configfile=$(tail -1 $tmpdir/${randcode}_configid)

        if [[ "$globallocal" == "null" ]]; then
        echo "
No config file is present. Running config utility to establish configurable options.
        "
        bash $libdir/configure $stdout $stderr $randcode $srcdir $tmpdir

        elif [[ "$globallocal" == "local" ]]; then
            echo "Using local config file: $configfile
"
        elif [[ "$globallocal" == "global" ]]; then
            echo "Using global config file: $configfile
"
        fi

## Check whether user supplied print_config.  If yes, list config options.
        if [[ "$1" == "print_config" ]]; then
        bash $libdir/readconfig $configfile $globallocal $stdout $stderr $randcode $tmpdir $srcdir
        exit 0
        fi

## Check whether user supplied configure.  If yes, run config utility.
        if [[ "$1" == "configure" ]]; then
            if [[ "$#" == "1" ]]; then
                bash $libdir/configure $stdout $stderr $randcode $srcdir $tmpdir
                exit 0
            elif [[ "$2" == "help" ]]; then
                less $docdir/configure.help
                exit 0
            elif [[ "$#" == "3" ]]; then
                bash $libdir/configure_setting $stdout $stderr $randcode $2 $3
                exit 0
            fi
        fi


## Check whether user supplied check.  If yes, run dependency check.
#        if [[ "$1" == "check" ]]; then
#            bash $bindir/dependency_check_slave $stdout $stderr $randcode
#            exit 0
#        fi

## Check whether user supplied check_result.  If yes, print results of dependency check.
#        if [[ "$1" == "check_result" ]]; then
#        resultcount=`ls $srcdir/RRLpipe.dependencies.result 2>/dev/null | wc -l`
#                if [[ $resultcount == 0 ]]; thep
#                echo "
#Dependency check has not been run previously.  To generate results, execute: akutils check
#                "
#                elif [[ $resultcount == 1 ]]; then
#                less $srcdir/RRLpipe.dependencies.result
#                fi
#                exit 0
#        fi

## Check whether user supplied test.  If yes, run workflow tests.
#        if [[ "$1" == "test" ]]; then
#        bash $bindir/RRLpipe_test $stdout $stderr $randcode
#        exit 0
#        fi

## Check whether user supplied test_result.  If yes, print results of workflow tests.
#        if [[ "$1" == "test_result" ]]; then
#        resultcount=`ls $srcdir/RRLpipe.workflow.test.result 2>/dev/null | wc -l`
#                if [[ $resultcount == 0 ]]; then
#                echo "
#Workflow tests have not been run previously.  To generate results, execute:
#akutils test
#                "
#                elif [[ $resultcount == 1 ]]; then
#                less -r $srcdir/RRLpipe.workflow.test.result
#                fi
#                exit 0
#        fi

## Check whether user supplied demult.  If yes, run demult or display specific usage or help
        if [[ "$1" == "demult" ]]; then
                if [[ -z "$2" ]]; then
                cat $docdir/demult.usage
                exit 0
                elif [[ "$2" == "help" ]]; then
                less $docdir/demult.help
                exit 0
                fi
        bash $libdir/demult $stdout $stderr $randcode $configfile $libdir $docdir $tmpdir $2 $3 $4 $5
        exit 0
        fi


## Check whether user supplied update.  If yes, run update or display specific usage or help
        if [[ "$1" == "update" ]]; then
#               if [[ -z "$2" ]]; then
#               cat $repodir/docs/update.usage
#               exit 0
#               elif [[ "$2" == "help" ]]; then
#               less $repodir/docs/update.help
#               exit 0
#               fi
        bash $libdir/update
        exit 0
        fi

## Check whether user supplied workflow. If yes, run workflow
        if [[ "$1" == "workflow" ]]; then
            bash $libdir/workflow
            exit 0
        fi

## Display usage for non-parseable command.
        cat $usage

exit 0

