#!/usr/bin/env bash
# Command autocompletion file for RRLpipe
# Lela Andrews, March 21, 2020
#
# Completed with help from https://eli.thegreenplace.net/2013/12/26/adding-bash-completion-for-your-own-tools-an-example-for-pss
#

_RRLpipe_complete()
{
  local cur prev opts base

    # COMP_WORDS is an array of words in the current command line.
    # COMP_CWORD is the index of the current word (the one the cursor is
    # in). So COMP_WORDS[COMP_CWORD] is the current word; we also record
    # the previous word here, although this specific script doesn't
    # use it yet.

  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"

  ## Basic options to autocomplete
  opts="configure print_config check check_result help
	phix_filtering strip_primers test
	test_result tutorial
	update
        "

  ## Complete available RRLpipe command arguments
  case $prev in
	RRLpipe)
	  COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
	  ;;

  ## Complete options to select commands
	strip_primers)
	  local sub="help 0 1 2"
	  COMPREPLY=( $(compgen -W "${sub}" -- ${cur}) )
	  ;;
	phix_filtering)
	  local sub="help"
	  COMPREPLY=( $(compgen -W "${sub}" -- ${cur}) )
	  ;;
	configure)
	  local sub="Reference Taxonomy Tree Chimeras
		Alignment_template Alignment_lanemask BLAST_evalue
		Split_libraries_qvalue Split_libraries_minpercent
		Split_libraries_maxbad Prefix_length
		Suffix_length OTU_picker Tax_assigner
		Rarefaction_depth CPU_cores Multx_errors
		ITSx_options Cutadapt_errors help"
	  COMPREPLY=( $(compgen -W "${sub}" -- ${cur}) )
	  ;;
  esac
  return 0
}

  ## Register _RRLpipe_complete for RRLpipe
complete -F _RRLpipe_complete RRLpipe

