#!/usr/bin/env bash
#
#  RRLpipe demult - demultiplex Illumina data for	
#
#  Version 0.1 (March 30, 2020)
#
#  Copyright (c) 2020 Lela Andrews
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event will the authors be held liable for any damages
#  arising from the use of this software.
#
#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#  3. This notice may not be removed or altered from any source distribution.
#
## Trap function on exit.
function finish {
if [[ -f $stdout ]]; then
	rm -r $stdout
fi
if [[ -f $stderr ]]; then
	rm -r $stderr
fi
if [[ -f $idtemp ]]; then
	rm -r $idtemp
fi
if [[ -f $indtemp ]]; then
	rm -r $indtemp
fi
if [[ -f $poptemp ]]; then
	rm -r $poptemp
fi
if [[ -f $popmap0 ]]; then
	rm -r $popmap0
fi
if [[ -f $popmap1 ]]; then
	rm -r $popmap1
fi
if [[ -f $mapcheck ]]; then
	rm -r $mapcheck
fi
}
trap finish EXIT
#set -e

## Define inputs and working directory

	workdir=$(pwd)

	stdout=($1)
	stderr=($2)
	randcode=($3)
	config=($4)
  libdir=($5)
  docdir=($6)
  tmpdir=($7)
	mapfile=($8)
	index=($9)
	read1=(${10})
	read2=(${11})

## If incorrect number of arguments supplied, display usage
	if [[ "$#" -le "9" ]] || [[ "$#" -ge "12" ]]; then
		cat $docdir/demult.usage
		exit 1
	fi

## Test for errors in map file
#	mapcheck="$tempdir/${randcode}_mapcheck.temp"
#	RADseq_utility metadata_check $metadatafile0 > $mapcheck
#	if [[ -z "$mapcheck" ]]; then
#		cat $mapcheck
#		echo "
#Please correct errors and try again. Exiting.
#		"
#		exit 1
#	fi

## Define sequencing mode based on number of supplied inputs
	if [[ -z "$8" ]]; then
	mode=(single)
	mode1=(SingleEnd)
	else
	mode=(paired)
	mode1=(PairedEnd)
	fi

## Check for adapters file or exit
#	adaptest=$(ls adapter* 2>/dev/null | wc -l)
#	if [[ "$adaptest" -ge "1" ]]; then
#	adapters=$(ls adapter* | head -1)
#	else
#	echo "
#No adapter file found. (adapter*)
#Exiting.
#	"
#	exit 1
#	fi

## Define working directory and log file
	date0=`date +%Y%m%d_%I%M%p`
	date100=`date -R`
	outdir="$workdir/demult_output"
	if [[ ! -d "$outdir" ]]; then
		mkdir -p $outdir
		log="${outdir}/log_demult_${date0}.txt"
	else
		logtest=$(ls $outdir/log_demult_* | wc -l)
		if [[ "$logtest" == "1" ]]; then
		log=$(ls $outdir/log_demult_*)
		else
		log="${outdir}/log_demult_${date0}.txt"
		fi
	fi

## Write mode to hidden file in output directory
	echo "$mode1" > $outdir/.sequencing_mode

## Read in variables from config file
	cores=(`grep "CPU_cores" $config | grep -v "#" | cut -f 2`)
	threads=$(expr $cores + 1)
	qual=(`grep "Qual_score" $config | grep -v "#" | cut -f 2`)
	multx_errors=(`grep "Multx_errors" $config | grep -v "#" | cut -f 2`)
	read_length=(`grep "Read_length" $config | grep -v "#" | cut -f 2`)
	slminpercent="0.95"

## Check that actual read length is not shorter than desired read length
#	seqlength=$((`sed '2q;d' $read1 | egrep "\w+" | wc -m`-1))
#	length_check=$(echo "$seqlength-$read_length" | bc | cut -d. -f1)
#	if [[ "$length_check" -lt "0" ]]; then
#		echo "
#Your sequencing reads are shorter than your desired read length as specified in
#your config file.
#Actual read length: $seqlength
#Desired read length: $read_length
#Adjust your config file accordingly (run RADseq_utility configure). Exiting.
#		"
#		exit 1
#	fi

## Log demult-derep start
	res0=$(date +%s.%N)
echo "demult beginning.
Sequencing mode detected: $mode1
"
echo "demult beginning.
Sequencing mode detected: $mode1
" >> $log

## Parse metadata file contents
#echo "Parsing metadata file contents.
#"
#	cp $metadatafile0 $outdir/metadata_file.txt
#	metadatafile="$outdir/metadata_file.txt"
#	SampleIDcol=$(awk '{for(i=1; i<=NF; i++) {if($i == "SampleID") printf(i) } exit 0}' $metadatafile)
#	Indexcol=$(awk '{for(i=1; i<=NF; i++) {if($i == "IndexSequence") printf(i) } exit 0}' $metadatafile)
#	Repcol=$(awk '{for(i=1; i<=NF; i++) {if($i == "Rep") printf(i) } exit 0}' $metadatafile)
#	Popcol=$(awk '{for(i=1; i<=NF; i++) {if($i == "PopulationID") printf(i) } exit 0}' $metadatafile)
#	wait

## Extract data from metadata file
	#Demultiplexing file
#	mapfile="$outdir/demultfile.txt"
#	idtemp="$tmpdir/${randcode}_sampleids.temp"
#	indtemp="$tmpdir/${randcode}_indexes.temp"
#	poptemp="$tmpdir/${randcode}_pops.temp"
#	touch $tpdir/${randcode}_sampleids.temp
#	grep -v "#" $metadatafile | cut -f${SampleIDcol} > $idtemp
#	grep -v "#" $metadatafile | cut -f${Indexcol} > $indtemp
#	grep -v "#" $metadatafile | cut -f${Popcol} > $poptemp
#	wait
#	paste $idtemp $indtemp > $mapfile
#	wait

#	if [[ ! -f $mapfile ]]; then
#		echo "Unexpected problem. Demultiplexing map not generated. Check
#your inputs and try again. Exiting.
#		"
#	exit 1
#	fi

	#Dereplication file
#	repfile="$outdir/repfile.txt"
#	awk -v repcol="$Repcol" '$repcol == 1' $metadatafile | cut -f${SampleIDcol} | cut -f1 -d"." > $repfile

#	#Initial populations file (non-dereplicated)
#	popmap0="$tmpdir/${randcode}_popids0.temp"
#	paste $idtemp $poptemp > $popmap0

	#Populations file for dereplicated data
#	popmap1="$tmpdir/${randcode}_popids1.temp"
#	popmap="$outdir/populations_file.txt"
#	for line in `cat $repfile`; do
#	grep ${line}.1 $popmap0 | cut -f2 >> $popmap1
#	done
#	paste $repfile $popmap1 > $popmap

## Demultiplex sequencing data with fastq-multx
	if [[ -d $outdir/demultiplexed_data ]]; then
		echo "Demultiplexing previously completed. Skipping step.
$outdir/demultiplexed_data
		"
	else
		echo "Demultiplexing raw data with fastq-multx.
		"
		echo "Demultiplexing raw data with fastq-multx.
		" >> $log
		res2=$(date +%s.%N)
		mkdir -p $outdir/demultiplexed_data
		echo "Demultiplexing command:" >> $log
	if [[ "$mode" == "single" ]]; then
		echo "fastq-multx -m $multx_errors -B $mapfile $index $read1 -o $outdir/demultiplexed_data/index.%.fq -o $outdir/demultiplexed_data/%.read1.fq &> $outdir/demultiplexed_data/log_fastq-multx.txt
		" >> $log
		fastq-multx -m $multx_errors -B $mapfile $index $read1 -o $outdir/demultiplexed_data/index.%.fq -o $outdir/demultiplexed_data/%.read1.fq &> $outdir/demultiplexed_data/log_fastq-multx.txt
	elif [[ "$mode" == "paired" ]]; then
		echo "fastq-multx -m $multx_errors -B $mapfile $index $read1 $read2 -o $outdir/demultiplexed_data/index.%.fq -o $outdir/demultiplexed_data/%.read1.fq -o $outdir/demultiplexed_data/%.read2.fq &> $outdir/demultiplexed_data/log_fastq-multx.txt
		" >> $log
		fastq-multx -m $multx_errors -B $mapfile $index $read1 $read2 -o $outdir/demultiplexed_data/index.%.fq -o $outdir/demultiplexed_data/%.read1.fq -o $outdir/demultiplexed_data/%.read2.fq &> $outdir/demultiplexed_data/log_fastq-multx.txt
	fi
		rm $outdir/demultiplexed_data/index.*
		rm $outdir/demultiplexed_data/unmatched*

	res3=$(date +%s.%N)
	dt=$(echo "$res3 - $res2" | bc)
	dd=$(echo "$dt/86400" | bc)
	dt2=$(echo "$dt-86400*$dd" | bc)
	dh=$(echo "$dt2/3600" | bc)
	dt3=$(echo "$dt2-3600*$dh" | bc)
	dm=$(echo "$dt3/60" | bc)
		ds=$(echo "$dt3-60*$dm" | bc)

	runtime=`printf "Demutliplexing runtime: %d days %02d hours %02d minutes %02.1f seconds\n" $dd $dh $dm $ds`
	echo "$runtime
	" >> $log
	fi

## Dereplicate samples if necessary (could make a small increase in speed for large datasets by fixing this step)
#samplecount=$(grep -v "#" $metadatafile 2>/dev/null | wc -l)
#repscount=$(awk -v repcol="$Repcol" '$repcol == 1' $metadatafile 2>/dev/null | wc -l)

#	if [[ $samplecount == $repscount ]]; then
#	reps="no"
#	echo "No replicates detected. Skipping dereplication step.
#	"
#	else
#	reps="yes"

#	if [[ -d $outdir/dereplicated_data ]]; then
#	echo "Dereplication previously completed. Skipping step.
#$outdir/dereplicated_data
#	"
#	else
#	mkdir -p $outdir/dereplicated_data

#	for sampleid in `cat $repfile`; do
#		if [[ "$mode" == "paired" ]]; then
#		cat $outdir/demultiplexed_data/${sampleid}*read1.fq > $outdir/dereplicated_data/${sampleid}.read1.fq
#		cat $outdir/demultiplexed_data/${sampleid}*read2.fq > $outdir/dereplicated_data/${sampleid}.read2.fq
#		elif [[ "$mode" == "single" ]]; then
#		cat $outdir/demultiplexed_data/${sampleid}*read1.fq > $outdir/dereplicated_data/${sampleid}.read.fq
#		fi
#	done

#	fi
#	fi

## Quality filter demultiplexd data with fastq-mcf
  dqf="$outdir/demultiplexed_quality_filtered_data"
	if [[ ! -d $dqf ]]; then
	echo "Quality filtering raw data with fastq-mcf.
Read lengths detected: $seqlength
Minimum quality threshold: $qual
Read length to retain: $read_length
	"
	echo "Quality filtering raw data with fastq-mcf.
Read lengths detected: $seqlength
Minimum quality threshold: $qual
Read length to retain: $read_length
	" >> $log
	res2=$(date +%s.%N)

		mkdir -p $dqf

	if [[ "$mode" == "single" ]]; then
	for line in `cat $mapfile | cut -f1`; do
		while [ $( pgrep -P $$ |wc -w ) -ge ${threads} ]; do
		sleep 1
		done
		echo "	fastq-mcf -q $qual -l $read_length -L $read_length -k 0 -t 0.001 $adapters $dqf/$line.read.fq -o $dqf/$line.read.mcf.fq" >> $log
		( fastq-mcf -q $qual -l $read_length -L $read_length -k 0 -t 0.001 $adapters $dqf/$line.read.fq -o $dqf/$line.read.mcf.fq > $dqf/log_${line}_fastq-mcf.txt 2>&1 || true ) &
	done
	fi
	if [[ "$mode" == "paired" ]]; then
	for line in `cat $mapfile | cut -f1`; do
		while [ $( pgrep -P $$ |wc -w ) -ge ${threads} ]; do
		sleep 1
		done
		echo "	fastq-mcf -q $qual -l $read_length -L $read_length -k 0 -t 0.001 $adapters $dqf/$line.read1.fq $dqf/$line.read2.fq -o $dqf/$line.read1.mcf.fq -o $dqf/$line.read2.mcf.fq" >> $log
		( fastq-mcf -q $qual -l $read_length -L $read_length -k 0 -t 0.001 $adapters $dqf/$line.read1.fq $dqf/$line.read2.fq -o $dqf/$line.read1.mcf.fq -o $dqf/$line.read2.mcf.fq > $dqf/log_${line}_fastq-mcf.txt 2>&1 || true ) &
	done
	fi
wait

	res3=$(date +%s.%N)
	dt=$(echo "$res3 - $res2" | bc)
	dd=$(echo "$dt/86400" | bc)
	dt2=$(echo "$dt-86400*$dd" | bc)
	dh=$(echo "$dt2/3600" | bc)
	dt3=$(echo "$dt2-3600*$dh" | bc)
	dm=$(echo "$dt3/60" | bc)
	ds=$(echo "$dt3-60*$dm" | bc)

	runtime=`printf "Quality filtering runtime: %d days %02d hours %02d minutes %02.1f seconds\n" $dd $dh $dm $ds`
	echo "$runtime
	" >> $log

	else
	echo "Quality filtering previously performed. Skipping step.
$outdir/quality_filtered_data
	"
fi

## Join and concatenate separate fastq files (denovo analysis only) ## Stacks is choking on variable length reads. Combine only.
## Combine separate read files
	res2=$(date +%s.%N)
#	if [[ ! -d $outdir/dereplicated_combined_data ]]; then
#echo "Combining read data (dereplicated data).
#"
#echo "Combining read data (dereplicated data).
#" >> $log
#	mkdir -p $outdir/dereplicated_combined_data
#	for sampleid in `cat $repfile`; do
#	echo "	cat $outdir/dereplicated_quality_filtered_data/${sampleid}.*.fq > $outdir/dereplicated_combined_data/${sampleid}.fq" >> $log
#	cat $outdir/dereplicated_quality_filtered_data/${sampleid}.*.fq > $outdir/dereplicated_combined_data/${sampleid}.fq
#	done
#	echo "" >> $log

	res3=$(date +%s.%N)
	dt=$(echo "$res3 - $res2" | bc)
	dd=$(echo "$dt/86400" | bc)
	dt2=$(echo "$dt-86400*$dd" | bc)
	dh=$(echo "$dt2/3600" | bc)
	dt3=$(echo "$dt2-3600*$dh" | bc)
	dm=$(echo "$dt3/60" | bc)
	ds=$(echo "$dt3-60*$dm" | bc)

	runtime=`printf "Read combining runtime: %d days %02d hours %02d minutes %02.1f seconds\n" $dd $dh $dm $ds`
	echo "$runtime
	" >> $log
#	else
#echo "Combining previously performed (dereplicated data). Skipping step.
#$outdir/combined_data
#"
#	fi

exit 0
