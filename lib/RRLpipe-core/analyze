#!/usr/bin/env bash
#
#  RRLpipe analyze - RRLpipe analysis script
#
#  Version 0.1 (April 8, 2020)
#
#  Copyright (c) 2020 -- Lela Andrews
#
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event will the authors be held liable for any damages
#  arising from the use of this software.
#
#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#  2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#  3. This notice may not be removed or altered from any source distribution.
#

# Trap function on exit.
function finish {
if [[ -f $stdout ]]; then
        rm $stdout
fi
if [[ -f $stderr ]]; then
        rm $stderr
fi
if [[ -f $stdout ]]; then
        rm -r $stdout
fi
if [[ -f $stderr ]]; then
        rm -r $stderr
fi
if [[ -f $idtemp ]]; then
        rm -r $idtemp
fi
if [[ -f $indtemp ]]; then
        rm -r $indtemp
fi
if [[ -f $poptemp ]]; then
        rm -r $poptemp
fi
if [[ -f $popmap0 ]]; then
        rm -r $popmap0
fi
if [[ -f $popmap1 ]]; then
        rm -r $popmap1
fi
if [[ -f $mapcheck ]]; then
        rm -r $mapcheck
fi
}
trap finish EXIT
set -e

## Define inputs and working directory
        workdir=$(pwd)
        stdout=($1)
        stderr=($2)
        randcode=($3)
        bindir=($4)
	config=($5)
        libdir=($6)
        docdir=($7)
        tmpdir=($8)
        mode=($9)
        index=(${10})
        read1=(${11})
        read2=(${12})

## If incorrect number of arguments supplied, display usage
#        if [[ "$#" -le "7" ]] || [[ "$#" -ge "10" ]]; then
#                cat $docdir/analyze.usage
#                exit 1
#        fi

## Paths and variables
        libdir=$(grep "Libraries" $bindir/.RRLpipe.config | cut -f2)
        srcdir=$(grep "Resources" $bindir/.RRLpipe.config | cut -f2)
        docdir=$(grep "Documentation" $bindir/.RRLpipe.config | cut -f2)
        tmpdir=$(grep "Temporary" $bindir/.RRLpipe.config | cut -f2)
        cmpdir=$(grep "Completion" $bindir/.RRLpipe.config | cut -f2)

## Usage and help
        usage="$docdir/analyze.usage"
        help="$docdir/analyze.help"

## Check whether user supplied help, -h or --help. If yes display help.
        if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "help" ]]; then
        less $help
                exit 0
        fi

## Read configurable options
	CPU_cores=$(grep -v "#" $config | grep "CPU_cores" | cut -f2)
	Sample_path=$(grep -v "#" $config | grep "Sample_path" | cut -f2)
	Popmap=$(grep -v "#" $config | grep "Popmap" | cut -f2)
	Ustacks_mm=$(grep -v "#" $config | grep "Ustacks_mm" | cut -f2)
	Cstacks_mm=$(grep -v "#" $config | grep "Cstacks_mm" | cut -f2)
	Var_alpha=$(grep -v "#" $config | grep "Var_alpha" | cut -f2)
	GT_alpha=$(grep -v "#" $config | grep "GT_alpha" | cut -f2)
	Paired_test=$(grep -v "#" $config | grep "Paired" | cut -f2)
		if [[ "$Paired_test" == "TRUE" ]]; then
			Paired="--paired"
		else
			Paired=""
		fi
	Rm_PCR_dups_test=$(grep -v "#" $config | grep "Rm_PCR_dups" | cut -f2)
               if [[ "$Rm_PCR_dups_test" == "TRUE" ]]; then
                        Rm_PCR_dups="--rm-pcr-duplicates"
                else
                        Rm_PCR_dups=""
                fi
	Min_pops=$(grep -v "#" $config | grep "Min_pops" | cut -f2)
	Min_samps=$(grep -v "#" $config | grep "Min_samps" | cut -f2)

## Check whether user supplied denovo and execute appropriate workflow
#	if [[ "$mode" == "denovo" ]]; then
#		echo "Starting analysis.
#Mode: denovo

#echo config options here, send output to log

		dnmcommand="denovo_map.pl --samples $Sample_path --popmap $Popmap -o ./denovo_output -M $Ustacks_mm -n $Cstacks_mm --var-alpha $Var_alpha --gt-alpha $GT_alpha -X \"populations: -p $Min_pops -r $Min_samps -T $CPU_cores $Paired $Rm_PCR_dups --plink --structure --vcf\""
echo $dnmcommand
#		sleep 1
#		echo "Calling denovo_map.pl
#"
#
#		wait
#		sleep 10
#		echo "denovo_map.pl complete.
#
#Calling populations
#"
#
#		populations -P ./denovo_output -O ./populations_output_bygenotype -M ./Genotype.map.BuschRADseq.nodupes.Working.txt --plink --structure --vcf --min-populations 2 --min-samples-per-pop 0.75 -t 24 --min-populations 2 --min-samples-per-pop 0.75
#		wait
#		sleep 10
#		echo "populations complete.

#Output directory:
#Log files:




#populations -P ./denovo_output -M ./map.BuschRADseq.nodupes.pops.Working.txt --plink --structure --vcf --min-populations 2 --min-samples-per-pop 0.75 -t 24 --min-populations 2 --min-samples-per-pop 0.75




exit 0
